#build.yml
- name: Ansible playbook for building the class VM
  
  hosts: localhost
  
  vars:
    ansible_connection: local
    ansible_python_interpreter: "{{ansible_playbook_python}}"
  
  tasks:
  - name: Test if first run or not
    stat:
      path: /root/.esfa-first-run
    register: first_run

  - set_fact:
      login_user: "{{ ansible_env.SUDO_USER }}"
  
    
#--- add repos ---  
  - name: Add Powershell APT repo
    apt:
      deb: https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
  
  - name: Add KeePassXC repo
    ansible.builtin.apt_repository:
      repo: ppa:phoerious/keepassxc
      state: present
#--- add repos (end) ---
#--- package operations ---
  - name: Update all packages to their latest version
    apt:
      name: "*"
      state: latest

  - name: "apt-get update"
    apt:
      update_cache: yes
    
  - name: Install packages (apt)
    ansible.builtin.package:
      name:
        - gedit
        - nmap
        - ncat
        - net-tools
        - tcpdump
        - curl
        - wireshark
        - tshark
        - keepassxc
        - libpam-google-authenticator
        - qrencode
        - hping3
        - hydra
        - hydra-gtk
        - vim
        - wget
        - tilix
        - powershell
        - apt-transport-https
        - software-properties-common
        - openssh-server
        - libaprutil1-dev
        - gcc
        - make
        - libpcre3-dev
        - john
        - xml2
        - default-jre
        - docker.io
      state: present
#--- package operations (end) ---
#--- permissions ---
  - name: Make script executable
    file:
      path: "{{ item }}"
      mode: '0775'
    loop:
      - start-nmap-exercise.sh
      - stop-nmap-exercise.sh
      - start-pentest.sh
      - stop-pentest.sh
      - testpermissions.sh
      - start-wazuh-exercise.sh
      - stop-wazuh-exercise.sh
      
  - name: Update permissions for exercise
    file:
      path: /etc/shadow
      mode: '0644'

#--- permissions (end) ---
#--- marketing ---
  - name: AS background
    ansible.builtin.copy:
      src: AS-logo.png
      dest: /usr/share/xfce4/backdrops/xubuntu-wallpaper.png
      owner: root
      group: root
      mode: '0644'

  - name: Default desktop config
    ansible.builtin.copy:
      src: xfce4-desktop.xml
      dest: /etc/xdg/xdg-xubuntu/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
      owner: root
      group: root
      mode: '0644'

#--- marketing ---
#--- accounts ---
  - ansible.builtin.user:
      name: backup
      password: "$6$KxhD46tzVpeWxUL6$UsOvWM/ik1seSAKbPjiUTNrYrQafkhqdbbvyHTLVgsqedWFfvqPfYDYWC2qy7HsszebDvgetRUUEkDvZk.vf6/"

  - ansible.builtin.user:
      name: infosec
      password: "$6$BzX9wKSAAa9jTM/k$I6W6Kl2MjBkA6RWJyiY.mG7j.OBnNVEXt21OcXAE3txaMkQ1TRv/wiSB3PqFKirCdAZoUDMB51U0D3rjK0WiL/"
      shell: /bin/bash
      system: yes
    when: not first_run.stat.exists
  
  - command: "/usr/bin/passwd -e infosec"
    when: not first_run.stat.exists
    
  - command: "git clone https://github.com/rfifarek/classVM"
    become: yes
    become_user: infosec
    args:
      chdir: /home/infosec
    when: not first_run.stat.exists
    
  - ansible.builtin.user:
      name: vmbuild
      shell: /sbin/nologin
    when: first_run.stat.exists and login_user != "vmbuild"

#--- accounts (end) ---
#--- services ---  
  - name: Enable and start SSHD
    ansible.builtin.systemd:
      state: started
      enabled: yes
      name: sshd
      
  - name: Stop and disable uneccessary services
    ansible.builtin.systemd:
      state: stopped
      enabled: no
      name: "{{ item }}"
    loop:
      - cups
#--- services (end) ---
#--- custom Apache ---      
  - name: Test if custom Apache already installed
    ansible.builtin.stat:
      path: /usr/local/apache2/bin/httpd
    register: httpdBin
  
  - name: download custom Apache 2.4.49
    get_url:
      url: https://archive.apache.org/dist/httpd/httpd-2.4.49.tar.bz2
      dest: /tmp/httpd-2.4.49.tar.bz2
    when: not httpdBin.stat.exists
      
  - name: Unarchive Apache tarball
    ansible.builtin.unarchive:
      src: /tmp/httpd-2.4.49.tar.bz2
      dest: /tmp
      remote_src: yes
    when: not httpdBin.stat.exists
  
  - name: Configuring Apache source
    command: "./configure"
    args:
      chdir: /tmp/httpd-2.4.49
    when: not httpdBin.stat.exists
  
  - name: Build and Install custom Apache
    shell: make && make install
    args:
      chdir: /tmp/httpd-2.4.49
    when: not httpdBin.stat.exists
#--- custom apache (end) ---
#--- custom files ---
  - name: Add NSE
    get_url:
      url: https://raw.githubusercontent.com/rfifarek/classVM/main/http-vuln-cve-2021-41773.nse
      dest: /usr/share/nmap/scripts/http-vuln-cve2021-41773.nse
      owner: root
      group: root
      mode: '0644'
  
  - name: Update NMAP scriptdb
    command: "nmap --script-updatedb"
  
  - name: Updated list
    get_url:
      url: https://raw.githubusercontent.com/rfifarek/classVM/main/password.lst
      dest: /usr/share/john/password.lst
      owner: root
      group: root
      mode: '0644'
  - name: EICAR 1
    get_url:
      url: https://secure.eicar.org/eicar.com
      dest: "{{ playbook_dir }}/eicar.com"
      owner: root
      group: root
      mode: '0644'
  - name: EICAR 2
    get_url:
      url: https://secure.eicar.org/eicar.com.txt
      dest: "{{ playbook_dir }}/eicar.com.txt"
      owner: root
      group: root
      mode: '0644'
  - name: EICAR 3
    get_url:
      url: https://secure.eicar.org/eicar_com.zip
      dest: "{{ playbook_dir }}/eicar_com.zip"
      owner: root
      group: root
      mode: '0644'
  - name: EICAR 4
    get_url:
      url: https://secure.eicar.org/eicarcom2.zip
      dest: "{{ playbook_dir }}/eicarcom2.zip"
      owner: root
      group: root
      mode: '0644'
            
#--- custom files (end) ---
#--- Wazuh install ---
  - name: Test if Wazuh appears to be already installed
    stat:
      path: /var/ossec/bin/wazuh-monitord
    register: wazuh
      
  - name: Download the Wazuh unattended install script
    get_url:
      url: https://packages.wazuh.com/resources/4.2/open-distro/unattended-installation/unattended-installation.sh
      dest: /tmp/unattended-installation.sh
    when: not wazuh.stat.exists 
    
  - name: Run the Wazuh unattended install script (reinstall)
    shell: /bin/bash /tmp/unattended-installation.sh -o > /tmp/wazuh-unattended-installation-output.log
    when: not wazuh.stat.exists
    
  - name: Disable Wazuh on startup (save RAM)
    ansible.builtin.systemd:
      name: "{{ item }}"
      state: stopped
      enabled: no
    loop:
      - wazuh-manager
      - elasticsearch
      - filebeat
      - kibana
      
#--- Wazuh install (end) ---
  - name: Update jvm.options
    get_url:
      url: https://raw.githubusercontent.com/rfifarek/classVM/main/jvm.options
      dest: /etc/elasticsearch/jvm.options

#--- add ansible snap module ---
  - name: Test if ansible-galaxy collection module installed
    ansible.builtin.stat:
      path: /root/.ansible/collections/ansible_collections/community/general/plugins/modules/snap.py
    register: snap
  
  - name: Install pre-req ansible-galaxy collection before running remaining.yml
    command: "ansible-galaxy collection install community.general"
    when: not snap.stat.exists
#--- add ansible snap module (end) ---
#--- run ansible tasks that depend on snap ---
  - name: Run snap.yml
    command: "ansible-playbook snap.yml"

#--- finish up
  - name: "Create first_run flag file"
    file:
      path: /root/.esfa-first-run
      state: touch
    when: not first_run.stat.exists
